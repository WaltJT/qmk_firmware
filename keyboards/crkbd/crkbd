/*
Copyright 2019 @foostan
Copyright 2020 Drashna Jaelre <@drashna>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "quantum.h"
#include <stdio.h>

#ifdef SWAP_HANDS_ENABLE
__attribute__((weak)) static keypos_t PROGMEM hand_swap_config[MATRIX_ROWS][MATRIX_COLS] = {
    // Left
    {{0, 4}, {1, 4}, {2, 4}, {3, 4}, {4, 4}, {5, 4}},
    {{0, 5}, {1, 5}, {2, 5}, {3, 5}, {4, 5}, {5, 5}},
    {{0, 6}, {1, 6}, {2, 6}, {3, 6}, {4, 6}, {5, 6}},
    {{0, 7}, {1, 7}, {2, 7}, {3, 7}, {4, 7}, {5, 7}},
    // Right
    {{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}},
    {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}},
    {{0, 2}, {1, 2}, {2, 2}, {3, 2}, {4, 2}, {5, 2}},
    {{0, 3}, {1, 3}, {2, 3}, {3, 3}, {4, 3}, {5, 3}}
};
#endif

#ifdef OLED_ENABLE

oled_rotation_t oled_init_kb(oled_rotation_t rotation) {
    if (is_keyboard_master()) {
        return OLED_ROTATION_270; // flips the display 270 degrees if offhand
    } else {
        return OLED_ROTATION_180; // flips the display 180 degrees if offhand
    }
}

layer_state_t layer_state_set_user(layer_state_t state) { //Inclusión obligatoria si vamos a mostrar contenido diferente en cada capa
  oled_clear();
  return state;
}

//Tamaño del OLED 32 X 128 en vertical

//START ANIMATION

#define FRAME_DURATION 120 // Duración de cada frame en milisegundos

// variables
    uint32_t timer = 0;
    uint8_t current_frame = 0;

    // Frames de la animación
    static void render_animationMiau(void) {
        // 'frame-1', 50x38px
        static const char miauframe_1 [] PROGMEM = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x0f, 0x07, 0x0f, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 
        0x1f, 0x1f, 0x1f, 0x0b, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xfd, 0xf9, 0xfb, 0xf9, 0xf9, 0xfd, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xc0, 0x80, 
        0x00, 0xf0, 0xf0, 0xf0, 0x80, 0x80, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0c, 0x0d, 0x0f, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
        };
        // 'frame-2', 50x38px
        static const char miauframe_2 [] PROGMEM = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x07, 0x03, 0x07, 0x03, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 
        0x3f, 0x3f, 0x3f, 0x1f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0xf9, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xf7, 0xe7, 0xe7, 0xe7, 0xf7, 0xf3, 0xf9, 0xf9, 0x7c, 0x1c, 0x86, 0xc0, 0x00, 0x00, 
        0xc0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf0, 0xe0, 0xc2, 0xee, 0xfc, 0xfc, 0xfd, 0xff, 0xff, 0xff, 0xff, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0e, 0x0c, 0x0f, 0x0f, 0x0f, 0x0c, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
        };
        // 'frame-3', 50x38px
        static const char miauframe_3 [] PROGMEM = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x07, 0x03, 0x07, 0x37, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 
        0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xe0, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0x9f, 0xc7, 0xc3, 0x01, 0x00, 0xc0, 0xc0, 0xe0, 
        0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xe1, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0e, 0x0f, 0x0f, 0x0f, 0x0f, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
        }; 
        // 'frame-4', 50x38px
        static const char miauframe_4 [] PROGMEM = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x0f, 0x03, 0x03, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0x7f, 0x7f, 0x3f, 0xbf, 0xbf, 0xbf, 0x9f, 0x9f, 0x9f, 0x9f, 0x1f, 0x1f, 0x1f, 0x0f, 
        0x0f, 0x1f, 0x1f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xe3, 0xe3, 0x01, 0x80, 0xc0, 0xe0, 0xf0, 
        0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf9, 0xfb, 0xff, 0xff, 0xff, 0xff, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
        };
        // 'frame-5', 50x38px
        static const char miauframe_5 [] PROGMEM = {
        0xff, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x1f, 0x07, 0x03, 0x01, 0x07, 0xdb, 0xff, 0xdf, 0xff, 0xff, 
        0xff, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3e, 0x3e, 0x1c, 0x01, 0x03, 0x01, 0x01, 0x01, 
        0x03, 0x03, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xf7, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xf0, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 
        0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xe4, 0xec, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
        };
        // 'frame-6', 50x38px
        static const char miauframe_6 [] PROGMEM = {
        0xff, 0xcf, 0xcf, 0xc7, 0xe7, 0xe7, 0xcf, 0xcf, 0xdf, 0x9f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x07, 0x27, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xbf, 0x3f, 0x1f, 0x0f, 0x0e, 0x00, 0x01, 0x01, 0x01, 0x01, 
        0x03, 0x07, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xde, 0xdf, 0xdf, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xf8, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 
        0xfc, 0xf8, 0xf8, 0xf0, 0xc0, 0x00, 0x00, 0xe0, 0xe6, 0xef, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
        }; 
        // 'frame-7', 50x38px
        static const char miauframe_7 [] PROGMEM = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x0f, 0x07, 0x1f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xfc, 0xfe, 0xfc, 0xfc, 0xf9, 0xf9, 0xfb, 0xf3, 0xf3, 0x13, 0x03, 0x01, 0x01, 0x01, 0x01, 
        0x03, 0x07, 0x07, 0x09, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xef, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xe0, 0x80, 0xf8, 0xfc, 0xfc, 
        0xfc, 0xfc, 0xf8, 0x80, 0x00, 0xc0, 0xc6, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
        };
        // 'frame-8', 50x38px
        static const char miauframe_8 [] PROGMEM = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x0f, 0x07, 0x0f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xf3, 0xc7, 0xcf, 0x9f, 0x9f, 0x9f, 0x9f, 0xdf, 0xcf, 0xe7, 0x87, 0x03, 0x03, 0x01, 0x01, 
        0x03, 0x03, 0x07, 0x07, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf0, 0xe0, 0xc0, 
        0xc0, 0xc0, 0xe0, 0x80, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
        0x0f, 0x0f, 0x0f, 0x0f, 0x0e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f
        };
        
    // Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1600)
	const char* pikaallArray[] = {
		miauframe_1,
		miauframe_2,
		miauframe_3,
		miauframe_4,
        miauframe_5,
		miauframe_6,
		miauframe_7,
		miauframe_8

    };

    //  Array de tamaños de los frames
        uint16_t frame_sizes[13] = {
            sizeof(miauframe_1),
            sizeof(miauframe_2),
            sizeof(miauframe_3),
            sizeof(miauframe_4),
            sizeof(miauframe_5),
            sizeof(miauframe_6),
            sizeof(miauframe_7),
            sizeof(miauframe_8)

    };


// Temporizador para que la animación funcione y cambie de frame
        if (timer_elapsed(timer) > FRAME_DURATION) {
            
            // Set timer to updated time
            timer = timer_read();
            
            // Increment frame
            current_frame = (current_frame + 1) % (sizeof(pikaallArray) / sizeof(pikaallArray[0]));

            // Dibujar la animación en la pantalla
            oled_write_raw_P(pikaallArray[current_frame], frame_sizes[current_frame]); 

    }
    
}

//END ANIMATION


uint16_t _QWERTY;
uint16_t _SIMBOLS;
uint16_t _NAVIGATE;
uint16_t _ADJUST;
uint16_t _DVORAK;
uint16_t _EMOJIS;
uint16_t _EMOJIS2;

static void oled_render_layer_state(void) {
    
    led_t led_state = host_keyboard_led_state();

    oled_write_P(PSTR("LAYER\n"), false);

    switch (get_highest_layer(layer_state)) {
        case 0: 
            oled_write_ln_P(PSTR(" QWE\n RTY\n"), false);
            oled_write_P(led_state.caps_lock ? PSTR("MAYUS\n CAP\n ") : PSTR("MAYUS\n \n "), false);
            oled_write_ln_P(PSTR(" \n"), false);
            break;
        case 1:
            oled_write_ln_P(PSTR(" SIMB OLS\n"), false);
            break;
        case 2:
            oled_write_ln_P(PSTR(" NAVI GATE\n"), false);
            break;
        case 3:
            oled_write_ln_P(PSTR(" ADJ\n UST\n"), false);
            break;
        case 4:
            oled_write_ln_P(PSTR(" DVO\n RAK\n"), false);
            oled_write_P(led_state.caps_lock ? PSTR("MAYUS\n CAP\n ")    : PSTR("MAYUS\n \n "), false);
            oled_write_ln_P(PSTR(" \n"), false);
            break;
        case 5:
            oled_write_ln_P(PSTR(" EMO\n JIS\n"), false);
            break;
        case 6:
            oled_write_ln_P(PSTR(" EMO\n JIS\n 2\n"), false);
            break;
        default:
            oled_write_ln_P(PSTR("Undef \n"), false);

    break;

    }
    render_animationMiau();
};

__attribute__((weak)) void oled_render_logo(void) {
    // clang-format off
    static const char PROGMEM crkbd_logo[] = {
        0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94,
        0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4,
        0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4,
        0};
    // clang-format on
    oled_write_P(crkbd_logo, false);
}

bool oled_task_kb(void) {
    if (!oled_task_user()) {
        return false;
    }
    if (is_keyboard_master()) {
        oled_render_layer_state();
    } else {
        oled_render_logo();
    }
    return false;
}

/*

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (record->event.pressed) {
      //set_keylog(keycode, record);
    }
    return process_record_user(keycode, record);
}

*/

#endif //END OLED